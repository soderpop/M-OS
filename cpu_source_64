module mos (
  input wire clock,
  input wire reset,
  input wire buffer_rotate,
  input wire [4:0] program_instruction,
  input wire add_instruction_enable,
  input wire read_binary_enable,
  output reg [4:0] next_instruction,
  input wire [4:0] write_binary_data,
  input wire write_binary_enable
);
  localparam BUFFER_SIZE = 64;
  localparam INSTRUCTION_SIZE = 5;
  
  reg [4:0] instruction_sets [0:BUFFER_SIZE - 1];
  reg [4:0] current_instruction;
  reg [7:0] buffer_pointer;
  reg [7:0] instruction_pointer;
  reg [6:0] set1_pointer;
  reg [6:0] set2_pointer;
  reg [6:0] set3_pointer;
  reg [4:0] binary_sequence [0:BUFFER_SIZE - 1];
  reg [7:0] read_pointer;
  reg [7:0] write_pointer;
  reg read_binary_mode;
  reg [4:0] write_binary_value;

  initial begin
    if (read_binary_mode) begin
      read_pointer <= read_pointer + 1;
      if (read_pointer >= BUFFER_SIZE) begin
        read_pointer <= 0;
      end
    end
    buffer_pointer <= 0;
    instruction_pointer <= 0;
    set1_pointer <= 0;
    set2_pointer <= 0;
    set3_pointer <= 0;
    current_instruction <= 0;
    read_pointer <= 0;
    write_pointer <= 0;
    read_binary_mode <= 0;
    write_binary_value <= 0;
  end

  always @(posedge clock) begin
    if (reset) begin
      buffer_pointer <= 0;
      instruction_pointer <= 0;
      set1_pointer <= 0;
      set2_pointer <= 0;
      set3_pointer <= 0;
      current_instruction <= 0;
      read_pointer <= 0;
      write_pointer <= 0;
      read_binary_mode <= 0;
      write_binary_value <= 0;
    end
    else begin
      if (buffer_rotate) begin
        buffer_pointer <= buffer_pointer + 1;
        if (buffer_pointer >= BUFFER_SIZE) begin
          buffer_pointer <= 0;
        end
        current_instruction <= instruction_sets[buffer_pointer];
        if (buffer_pointer >= BUFFER_SIZE / 3) begin
          set1_pointer <= set1_pointer + 1;
        end
        else if (buffer_pointer >= 2 * BUFFER_SIZE / 3) begin
          set2_pointer <= set2_pointer + 1;
        end
        else begin
          set3_pointer <= set3_pointer + 1;
        end
        if (set1_pointer >= BUFFER_SIZE / 3) begin
          set1_pointer <= 0;
        end
        else if (set2_pointer >= BUFFER_SIZE / 3) begin
          set2_pointer <= 0;
        end
        else if (set3_pointer >= BUFFER_SIZE / 3) begin
          set3_pointer <= 0;
        end
      end
      else begin
        if (add_instruction_enable) begin
          instruction_sets[buffer_pointer] <= program_instruction;
          
          if (write_binary_enable) begin
            binary_sequence[write_pointer] <= write_binary_data;
            write_pointer <= write_pointer + 1;
            if (write_pointer >= BUFFER_SIZE) begin
              write_pointer <= 0;
            end
          end
          if (read_binary_enable) begin
            if (read_binary_mode) begin
              next_instruction <= binary_sequence[read_pointer];
            end else begin
              next_instruction <= instruction_sets[instruction_pointer];
            end
            read_pointer <= read_pointer + 1;
            if (read_pointer >= BUFFER_SIZE) begin
              read_pointer <= 0;
            end
          end
          read_binary_mode <= read_binary_enable;
        end
      end
    end
  end
endmodule
